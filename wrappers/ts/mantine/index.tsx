/**
 * A set of [candy_wrappers](https://github.com/thoughtbot/candy_wrapper) around
 * Mantine input component.  It works with the output from
 * [FormProps](https://github.com/thoughtbot/form_props).
 *
 * You modify these components to fit your design needs.
 */

import React, {
  useState,
  useContext,
  createContext,
  useMemo,
  ComponentProps,
} from 'react'

export type {
  CheckboxField as RailsCheckboxFieldProps,
  CollectionCheckboxesField as RailsCollectionCheckboxesFieldProps,
  CollectionRadioButtonsField as RailsCollectionRadioButtonsFieldProps,
  ColorField as RailsColorFieldProps,
  DateField as RailsDateFieldProps,
  DateTimeLocalField as RailsDateTimeLocalFieldProps,
  EmailField as RailsEmailFieldProps,
  FileField as RailsFileFieldProps,
  HiddenField as RailsHiddenFieldProps,
  MonthField as RailsMonthFieldProps,
  NumberField as RailsNumberFieldProps,
  PasswordField as RailsPasswordFieldProps,
  RangeField as RailsRangeFieldProps,
  SearchField as RailsSearchFieldProps,
  Select as RailsSelectProps,
  SubmitProps as RailsSubmitButtonProps,
  TelField as RailsTelFieldProps,
  TextArea as RailsTextAreaProps,
  TextField as RailsTextFieldProps,
  TimeField as RailsTimeFieldProps,
  UrlField as RailsUrlFieldProps,
  HTMLFormProps as RailsHTMLFormProps,
  ValidationErrors,
} from '@thoughtbot/candy_wrapper'

import {
  CheckboxField as RailsCheckboxField,
  CollectionCheckboxesField as RailsCollectionCheckboxesField,
  HiddenField as RailsHiddenField,
  CollectionRadioButtonsField as RailsCollectionRadioButtonsField,
  ColorField as RailsColorField,
  DateField as RailsDateField,
  DateTimeLocalField as RailsDateTimeLocalField,
  EmailField as RailsEmailField,
  MonthField as RailsMonthField,
  NumberField as RailsNumberField,
  PasswordField as RailsPasswordField,
  SearchField as RailsSearchField,
  SingleSelect as RailsSingleSelect,
  MultiSelect as RailsMultiSelect,
  TelField as RailsTelField,
  FileField as RailsFileField,
  TextField as RailsTextField,
  TimeField as RailsTimeField,
  UrlField as RailsUrlField,
  TextArea as RailsTextArea,
  HTMLFormProps as RailsHTMLFormProps,
  ValidationErrors,
  SubmitProps as RailsSubmitButton,
} from '@thoughtbot/candy_wrapper'

import {
  Checkbox as MantineCheckbox,
  Radio as MantineRadio,
  Group as MantineGroup,
  TextInput as MantineTextInput,
  ColorInput as MantineColorInput,
  NumberInput as MantineNumberInput,
  PasswordInput as MantinePasswordInput,
  Slider as MantineSlider,
  Select as MantineSelect,
  MultiSelect as MantineMultiSelect,
  Textarea as MantineTextArea,
  FileInput as MantineFileInput,
  Button as MantineButton,
} from '@mantine/core'

import {
  DateValue as MantineDateValue,
  DateInput as MantineDateInput,
  DateTimePicker as MantineDateTimePicker,
  MonthPickerInput as MantineMonthPickerInput,
  TimeInput as MantineTimeInput,
} from '@mantine/dates'

import dayjs from 'dayjs'

export const ValidationContext = createContext<ValidationErrors>({})

export const useErrorMessage = (errorKey?: string) => {
  const errors = useContext(ValidationContext)

  return useMemo(() => {
    if (!errorKey) {
      return null
    }

    const validationError = errors[errorKey]
    const hasErrors = errorKey && validationError

    if (!hasErrors) {
      return null
    }

    const errorMessages = Array.isArray(validationError)
      ? validationError
      : [validationError]

    return errorMessages.join(' ')
  }, [errors, errorKey])
}

export type ExtrasProps = Record<string, RailsHiddenField>

/**
 * Extras renders the hidden inputs generated by form_props.
 *
 * Its meant to be used with a form component and renders hidden values for
 * utf8, crsf_token, _method
 */
export const Extras = (hiddenInputAttributes: ExtrasProps) => {
  const hiddenProps = Object.values(hiddenInputAttributes)
  const hiddenInputs = hiddenProps.map((props: RailsHiddenField) => (
    <input {...props} type="hidden" key={props.name} />
  ))

  return <>{hiddenInputs}</>
}

export interface FormProps<T = object> {
  extras: ExtrasProps
  inputs: T
  form: RailsHTMLFormProps
}

type FormElementProps = React.FormHTMLAttributes<HTMLFormElement> & {
  extras: ExtrasProps
  validationErrors?: ValidationErrors
}
/**
 * A basic form component that supports inline errors.
 *
 * It's meant to be used with FormProps and mimics the ways that
 * Rails forms are generated.
 */
export const Form = ({
  extras,
  validationErrors = {},
  children,
  ...props
}: FormElementProps) => {
  return (
    <form {...props}>
      <ValidationContext.Provider value={validationErrors}>
        <Extras {...extras}></Extras>
        {children}
      </ValidationContext.Provider>
    </form>
  )
}

type InputProps = {
  label: string
  errorKey?: string
}

/**
 * A checkbox component that wraps Mantine's Checkbox.
 *
 * Designed to work with a payload form_props's [checkbox helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#checkbox-helper).
 * Mimics the rails equivalent. Please modify to your liking.
 */
type CheckboxProps = Omit<ComponentProps<typeof MantineCheckbox>, 'type'> &
  RailsCheckboxField &
  InputProps

export const Checkbox = ({
  type: _type,
  includeHidden,
  uncheckedValue,
  errorKey,
  ...rest
}: CheckboxProps) => {
  const { name } = rest
  const errorMessage = useErrorMessage(errorKey)

  return (
    <>
      {includeHidden && (
        <input
          type="hidden"
          name={name}
          defaultValue={uncheckedValue}
          autoComplete="off"
        />
      )}
      <MantineCheckbox {...rest} error={errorMessage} />
    </>
  )
}

type CollectionCheckboxesFieldProps = RailsCollectionCheckboxesField &
  InputProps

/**
 * A collection checkbox component that wraps Mantine's Checkbox and Group.
 *
 * Designed to work with a payload form_props's [collection_check_boxes helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#collection-select).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const CollectionCheckboxes = ({
  includeHidden,
  collection,
  label,
  errorKey,
}: CollectionCheckboxesFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  if (collection.length === 0) {
    return null
  }

  const defaultItems = collection.filter((option) => !!option.defaultChecked)
  const items = collection.filter((option) => !!option.checked)
  const valueProps: TransformedValues<string[]> = {}
  if (defaultItems.length > 0) {
    valueProps.defaultValue = defaultItems.map((option) => option.value)
  } else if (items.length > 0) {
    valueProps.value = items.map((option) => option.value)
  }

  const checkboxes = collection.map(
    ({ checked: _checked, defaultChecked: _defaultChecked, ...rest }) => {
      return <Checkbox {...rest} key={rest.id} />
    }
  )

  const { name } = collection[0]

  return (
    <>
      {includeHidden && (
        <input type="hidden" name={name} defaultValue={''} autoComplete="off" />
      )}
      <MantineCheckbox.Group label={label} {...valueProps} error={errorMessage}>
        <MantineGroup mt="xs">{checkboxes}</MantineGroup>
      </MantineCheckbox.Group>
    </>
  )
}

type CollectionRadioButtonsFieldProps = RailsCollectionRadioButtonsField &
  InputProps

/**
 * A collection radio button component that wraps Mantine's Radio and Group.
 *
 * Designed to work with a payload form_props's [collection_radio_buttons helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#collection-select).
 * Mimics the rails equivalent. Please modify to your liking.
 */
// I wanna put everything else into gruop component
export const CollectionRadioButtons = ({
  includeHidden,
  collection,
  label,
  errorKey,
}: CollectionRadioButtonsFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  if (collection.length == 0) {
    return null
  }

  const defaultItem = collection.find((option) => !!option.defaultChecked)
  const item = collection.find((option) => !!option.checked)
  const valueProps: TransformedValues<string> = {}
  if (defaultItem) {
    valueProps.defaultValue = defaultItem.value
  } else if (item) {
    valueProps.value = item.value
  }

  const radioButtons = collection.map((options, index) => {
    const {
      checked: _checked,
      defaultChecked: _defaultChecked,
      ...rest
    } = options
    return <MantineRadio {...rest} key={index} />
  })

  const { name } = collection[0]

  return (
    <>
      {includeHidden && (
        <input type="hidden" name={name} defaultValue={''} autoComplete="off" />
      )}

      <MantineRadio.Group label={label} {...valueProps} error={errorMessage}>
        <MantineGroup mt="xs">{radioButtons}</MantineGroup>
      </MantineRadio.Group>
    </>
  )
}

export type TextFieldProps = ComponentProps<typeof MantineTextInput> &
  RailsTextField &
  InputProps
/**
 * A text field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [text_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TextField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: TextFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return (
    <MantineTextInput
      label={label}
      type={'text'}
      error={errorMessage}
      {...rest}
    />
  )
}

export type EmailFieldProps = ComponentProps<typeof MantineTextInput> &
  RailsEmailField &
  InputProps

/**
 * A email field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const EmailField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: EmailFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return (
    <MantineTextInput
      label={label}
      type="email"
      error={errorMessage}
      {...rest}
    />
  )
}

export type ColorFieldProps = ComponentProps<typeof MantineColorInput> &
  RailsColorField &
  InputProps

/**
 * A color field component that wraps Mantine's ColorInput.
 *
 * Designed to work with a payload form_props's [color_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const ColorField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: ColorFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)
  return <MantineColorInput label={label} error={errorMessage} {...rest} />
}

export type DateFieldProps = ComponentProps<typeof MantineDateInput> &
  RailsDateField &
  InputProps

/**
 * A date field component that wraps Mantine's DateInput.
 *
 * Designed to work with a payload form_props's [date_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const DateField = ({
  type: _type,
  label,
  value,
  defaultValue,
  errorKey,
  ...rest
}: DateFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  const valueProps: TransformedValues<MantineDateValue> = {}
  if (value) {
    valueProps.value = dayjs(value).toDate()
  } else if (defaultValue) {
    valueProps.defaultValue = dayjs(defaultValue).toDate()
  }
  return (
    <MantineDateInput
      label={label}
      error={errorMessage}
      valueFormat="YYYY-MM-DD"
      {...valueProps}
      {...rest}
    />
  )
}

export type DateTimeLocalFieldProps = ComponentProps<
  typeof MantineDateTimePicker
> &
  RailsDateTimeLocalField &
  InputProps

/**
 * A date field component that wraps Mantine's DateTimeInput.
 *
 * Designed to work with a payload form_props's [date_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const DateTimeLocalField = ({
  type: _type,
  label,
  value,
  max,
  min,
  defaultValue,
  errorKey,
  ...rest
}: DateTimeLocalFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  const valueProps: TransformedValues<MantineDateValue> = {}
  if (value) {
    valueProps.value = dayjs(value).toDate()
  } else if (defaultValue) {
    valueProps.defaultValue = dayjs(defaultValue).toDate()
  }

  const minMaxProps: { minDate?: Date; maxDate?: Date } = {}

  if (min) {
    minMaxProps.minDate = dayjs(min).toDate()
  }
  if (max) {
    minMaxProps.maxDate = dayjs(max).toDate()
  }

  return (
    <MantineDateTimePicker
      label={label}
      valueFormat="YYYY-MM-DD hh:mm:ss"
      withSeconds
      error={errorMessage}
      {...minMaxProps}
      {...valueProps}
      {...rest}
    />
  )
}

export type TimeFieldProps = ComponentProps<typeof MantineTimeInput> &
  RailsTimeField &
  InputProps

/**
 * A time field component that wraps Mantine's TimeInput.
 *
 * Designed to work with a payload form_props's [date_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TimeField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: TimeFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return <MantineTimeInput label={label} error={errorMessage} {...rest} />
}

export type SearchFieldProps = ComponentProps<typeof MantineTextInput> &
  RailsSearchField &
  InputProps

/**
 * A search field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const SearchField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: SearchFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return (
    <MantineTextInput
      label={label}
      type="search"
      error={errorMessage}
      {...rest}
    />
  )
}

export type TelFieldProps = ComponentProps<typeof MantineTextInput> &
  RailsTelField &
  InputProps

/**
 * A tel field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TelField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: TelFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return (
    <MantineTextInput label={label} type="tel" error={errorMessage} {...rest} />
  )
}

export type UrlFieldProps = ComponentProps<typeof MantineTextInput> &
  RailsUrlField &
  InputProps

/**
 * A Url field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const UrlField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: UrlFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return (
    <MantineTextInput label={label} type="url" error={errorMessage} {...rest} />
  )
}

export type MonthFieldProps = Omit<
  ComponentProps<typeof MantineMonthPickerInput<'default'>>,
  'type'
> &
  RailsMonthField &
  InputProps

type TransformedValues<T> = {
  value?: T
  defaultValue?: T
}

/**
 * A month field component that wraps Mantine's MonthInput.
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const MonthField = ({
  type: _type,
  label,
  value,
  min,
  max,
  defaultValue,
  errorKey,
  ...rest
}: MonthFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)
  const valueProps: TransformedValues<MantineDateValue> = {}
  if (value) {
    valueProps.value = dayjs(value).toDate()
  } else if (defaultValue) {
    valueProps.defaultValue = dayjs(defaultValue).toDate()
  }

  const minMaxProps: { minDate?: Date; maxDate?: Date } = {}

  if (min) {
    minMaxProps.minDate = dayjs(min).toDate()
  }
  if (max) {
    minMaxProps.maxDate = dayjs(max).toDate()
  }

  return (
    <MantineMonthPickerInput
      label={label}
      {...rest}
      {...valueProps}
      {...minMaxProps}
      type={'default'}
      error={errorMessage}
    />
  )
}

export type NumberFieldProps = Omit<
  ComponentProps<typeof MantineNumberInput>,
  'type'
> &
  RailsNumberField &
  InputProps
/**
 * A number field component that wraps Mantine's NumberInput.
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#number-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const NumberField = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: NumberFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return <MantineNumberInput {...rest} label={label} error={errorMessage} />
}

export type PasswordFieldProps = typeof MantinePasswordInput &
  RailsPasswordField &
  InputProps
export const PasswordField = ({
  type: _type,
  label,
  errorKey,
  size,
  ...rest
}: PasswordFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)
  let inputProps: { inputSize?: string } = {}

  if (size) {
    inputProps.inputSize = `${size}`
  }

  return (
    <MantinePasswordInput
      {...rest}
      {...inputProps}
      label={label}
      error={errorMessage}
    />
  )
}
/**
 * A wrapper over Mantine's MultiSelect to support Rails query string. You would
 * typically use the `Select` component which nicely handles `f.select(multiple: true)`
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#number-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const MultiSelect = (
  props: ComponentProps<typeof MantineMultiSelect>
) => {
  const [values, setValues] = useState<string[]>(
    props.value || props.defaultValue || []
  )
  const name = props.name

  return (
    <>
      <MantineMultiSelect
        onChange={setValues}
        // Mantine creates a single hidden input with delimited values. That doesn't work
        // for Rails as it uses querystring brackets to represent multiple values. To fix
        // this, we rename the hidden input prop's name to _IGNORE and set the value ourselves.
        hiddenInputProps={{ name: '_IGNORE' }}
        {...props}
      />
      {values.map((val) => (
        <input
          type="hidden"
          key={val}
          name={name}
          value={val}
          autoComplete="off"
        />
      ))}
    </>
  )
}

type SingleProps = ComponentProps<typeof MantineSelect>
type MultiProps = ComponentProps<typeof MantineMultiSelect>
type SelectProps = (
  | (SingleProps & RailsSingleSelect)
  | (MultiProps & RailsMultiSelect)
) &
  InputProps

/**
 * A select component that wraps Mantine's Select and MultiSelect.
 *
 * It will switch between the two depending if you use `multiple: true` with `f.select`.
 *
 * Designed to work with a payload form_props's [select helpers](https://github.com/thoughtbot/form_props?tab=readme-ov-file#select-helpers),
 * [collection_select helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#collection-select), and [grouped_collection_select helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#group-collection-select).
 *
 * Please modify to your liking.
 */
export const Select = ({
  includeHidden,
  name,
  options,
  errorKey,
  type: _type,
  ...rest
}: SelectProps) => {
  const errorMessage = useErrorMessage(errorKey)

  const addHidden = includeHidden && rest.multiple
  const data = options.map((item) => {
    if ('options' in item) {
      return {
        group: item.label,
        items: item.options,
      }
    } else {
      return item
    }
  })

  return (
    <>
      {addHidden && (
        <input type="hidden" name={name} value={''} autoComplete="off" />
      )}
      {rest.multiple ? (
        <MultiSelect name={name} {...rest} data={data} error={errorMessage} />
      ) : (
        <MantineSelect name={name} {...rest} data={data} error={errorMessage} />
      )}
    </>
  )
}

type TextAreaProps = ComponentProps<typeof MantineTextArea> &
  RailsTextArea &
  InputProps

/**
 * A TextArea component that wraps Mantine's TextArea.
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#number-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TextArea = ({
  type: _type,
  label,
  errorKey,
  ...rest
}: TextAreaProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return <MantineTextArea label={label} error={errorMessage} {...rest} />
}

/**
 * A FileField component that wraps Mantine's FileInput.
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#number-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
type FileFieldProps = Omit<ComponentProps<typeof MantineFileInput>, 'type'> &
  RailsFileField &
  InputProps

export const FileField = ({
  type: _type,
  errorKey,
  label,
  ...rest
}: FileFieldProps) => {
  const errorMessage = useErrorMessage(errorKey)

  return <MantineFileInput label={label} error={errorMessage} {...rest} />
}

type SubmitButtonProps = ComponentProps<typeof MantineButton> &
  RailsSubmitButton

/**
 * A SubmitButton component.
 *
 * Designed to work with a payload form_props's [submit helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#form-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const SubmitButton = ({
  type: _type,
  text,
  ...rest
}: SubmitButtonProps) => {
  return (
    <MantineButton {...rest} type="submit">
      {text}
    </MantineButton>
  )
}
