/**
 * A set of [candy_wrappers](https://github.com/thoughtbot/candy_wrapper) around
 * Mantine input component.  It works with the output from
 * [FormProps](https://github.com/thoughtbot/form_props).
 *
 * You modify these components to fit your design needs.
 */
import React, { useState, useContext, createContext, useMemo, } from 'react';
import { Checkbox as MantineCheckbox, Radio as MantineRadio, Group as MantineGroup, TextInput as MantineTextInput, ColorInput as MantineColorInput, NumberInput as MantineNumberInput, PasswordInput as MantinePasswordInput, Select as MantineSelect, MultiSelect as MantineMultiSelect, Textarea as MantineTextArea, FileInput as MantineFileInput, Button as MantineButton, } from '@mantine/core';
import { DateInput as MantineDateInput, DateTimePicker as MantineDateTimePicker, MonthPickerInput as MantineMonthPickerInput, TimeInput as MantineTimeInput, } from '@mantine/dates';
import dayjs from 'dayjs';
export const ValidationContext = createContext({});
export const useErrorMessage = (errorKey) => {
    const errors = useContext(ValidationContext);
    return useMemo(() => {
        if (!errorKey) {
            return null;
        }
        const validationError = errors[errorKey];
        const hasErrors = errorKey && validationError;
        if (!hasErrors) {
            return null;
        }
        const errorMessages = Array.isArray(validationError)
            ? validationError
            : [validationError];
        return errorMessages.join(' ');
    }, [errors, errorKey]);
};
/**
 * Extras renders the hidden inputs generated by form_props.
 *
 * Its meant to be used with a form component and renders hidden values for
 * utf8, crsf_token, _method
 */
export const Extras = (hiddenInputAttributes) => {
    const hiddenProps = Object.values(hiddenInputAttributes);
    const hiddenInputs = hiddenProps.map((props) => (<input {...props} type="hidden" key={props.name}/>));
    return <>{hiddenInputs}</>;
};
/**
 * A basic form component that supports inline errors.
 *
 * It's meant to be used with FormProps and mimics the ways that
 * Rails forms are generated.
 */
export const Form = ({ extras, validationErrors = {}, children, ...props }) => {
    return (<form {...props}>
      <ValidationContext.Provider value={validationErrors}>
        <Extras {...extras}></Extras>
        {children}
      </ValidationContext.Provider>
    </form>);
};
export const Checkbox = ({ type: _type, includeHidden, uncheckedValue, errorKey, ...rest }) => {
    const { name } = rest;
    const errorMessage = useErrorMessage(errorKey);
    return (<>
      {includeHidden && (<input type="hidden" name={name} defaultValue={uncheckedValue} autoComplete="off"/>)}
      <MantineCheckbox {...rest} error={errorMessage}/>
    </>);
};
/**
 * A collection checkbox component that wraps Mantine's Checkbox and Group.
 *
 * Designed to work with a payload form_props's [collection_check_boxes helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#collection-select).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const CollectionCheckboxes = ({ includeHidden, collection, label, errorKey, }) => {
    const errorMessage = useErrorMessage(errorKey);
    if (collection.length === 0) {
        return null;
    }
    const defaultItems = collection.filter((option) => !!option.defaultChecked);
    const items = collection.filter((option) => !!option.checked);
    const valueProps = {};
    if (defaultItems.length > 0) {
        valueProps.defaultValue = defaultItems.map((option) => option.value);
    }
    else if (items.length > 0) {
        valueProps.value = items.map((option) => option.value);
    }
    const checkboxes = collection.map(({ checked: _checked, defaultChecked: _defaultChecked, ...rest }) => {
        return <Checkbox {...rest} key={rest.id}/>;
    });
    const { name } = collection[0];
    return (<>
      {includeHidden && (<input type="hidden" name={name} defaultValue={''} autoComplete="off"/>)}
      <MantineCheckbox.Group label={label} {...valueProps} error={errorMessage}>
        <MantineGroup mt="xs">{checkboxes}</MantineGroup>
      </MantineCheckbox.Group>
    </>);
};
/**
 * A collection radio button component that wraps Mantine's Radio and Group.
 *
 * Designed to work with a payload form_props's [collection_radio_buttons helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#collection-select).
 * Mimics the rails equivalent. Please modify to your liking.
 */
// I wanna put everything else into gruop component
export const CollectionRadioButtons = ({ includeHidden, collection, label, errorKey, }) => {
    const errorMessage = useErrorMessage(errorKey);
    if (collection.length == 0) {
        return null;
    }
    const defaultItem = collection.find((option) => !!option.defaultChecked);
    const item = collection.find((option) => !!option.checked);
    const valueProps = {};
    if (defaultItem) {
        valueProps.defaultValue = defaultItem.value;
    }
    else if (item) {
        valueProps.value = item.value;
    }
    const radioButtons = collection.map((options, index) => {
        const { checked: _checked, defaultChecked: _defaultChecked, ...rest } = options;
        return <MantineRadio {...rest} key={index}/>;
    });
    const { name } = collection[0];
    return (<>
      {includeHidden && (<input type="hidden" name={name} defaultValue={''} autoComplete="off"/>)}

      <MantineRadio.Group label={label} {...valueProps} error={errorMessage}>
        <MantineGroup mt="xs">{radioButtons}</MantineGroup>
      </MantineRadio.Group>
    </>);
};
/**
 * A text field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [text_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TextField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return (<MantineTextInput label={label} type={'text'} error={errorMessage} {...rest}/>);
};
/**
 * A email field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const EmailField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return (<MantineTextInput label={label} type="email" error={errorMessage} {...rest}/>);
};
/**
 * A color field component that wraps Mantine's ColorInput.
 *
 * Designed to work with a payload form_props's [color_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const ColorField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return <MantineColorInput label={label} error={errorMessage} {...rest}/>;
};
/**
 * A date field component that wraps Mantine's DateInput.
 *
 * Designed to work with a payload form_props's [date_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const DateField = ({ type: _type, label, value, defaultValue, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    const valueProps = {};
    if (value) {
        valueProps.value = dayjs(value).toDate();
    }
    else if (defaultValue) {
        valueProps.defaultValue = dayjs(defaultValue).toDate();
    }
    return (<MantineDateInput label={label} error={errorMessage} valueFormat="YYYY-MM-DD" {...valueProps} {...rest}/>);
};
/**
 * A date field component that wraps Mantine's DateTimeInput.
 *
 * Designed to work with a payload form_props's [date_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const DateTimeLocalField = ({ type: _type, label, value, max, min, defaultValue, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    const valueProps = {};
    if (value) {
        valueProps.value = dayjs(value).toDate();
    }
    else if (defaultValue) {
        valueProps.defaultValue = dayjs(defaultValue).toDate();
    }
    const minMaxProps = {};
    if (min) {
        minMaxProps.minDate = dayjs(min).toDate();
    }
    if (max) {
        minMaxProps.maxDate = dayjs(max).toDate();
    }
    return (<MantineDateTimePicker label={label} valueFormat="YYYY-MM-DD hh:mm:ss" withSeconds error={errorMessage} {...minMaxProps} {...valueProps} {...rest}/>);
};
/**
 * A time field component that wraps Mantine's TimeInput.
 *
 * Designed to work with a payload form_props's [date_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TimeField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return <MantineTimeInput label={label} error={errorMessage} {...rest}/>;
};
/**
 * A search field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const SearchField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return (<MantineTextInput label={label} type="search" error={errorMessage} {...rest}/>);
};
/**
 * A tel field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TelField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return (<MantineTextInput label={label} type="tel" error={errorMessage} {...rest}/>);
};
/**
 * A Url field component that wraps Mantine's TextInput.
 *
 * Designed to work with a payload form_props's [email_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#text-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const UrlField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return (<MantineTextInput label={label} type="url" error={errorMessage} {...rest}/>);
};
/**
 * A month field component that wraps Mantine's MonthInput.
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#date-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const MonthField = ({ type: _type, label, value, min, max, defaultValue, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    const valueProps = {};
    if (value) {
        valueProps.value = dayjs(value).toDate();
    }
    else if (defaultValue) {
        valueProps.defaultValue = dayjs(defaultValue).toDate();
    }
    const minMaxProps = {};
    if (min) {
        minMaxProps.minDate = dayjs(min).toDate();
    }
    if (max) {
        minMaxProps.maxDate = dayjs(max).toDate();
    }
    return (<MantineMonthPickerInput label={label} {...rest} {...valueProps} {...minMaxProps} type={'default'} error={errorMessage}/>);
};
/**
 * A number field component that wraps Mantine's NumberInput.
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#number-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const NumberField = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return <MantineNumberInput {...rest} label={label} error={errorMessage}/>;
};
export const PasswordField = ({ type: _type, label, errorKey, size, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    let inputProps = {};
    if (size) {
        inputProps.inputSize = `${size}`;
    }
    return (<MantinePasswordInput {...rest} {...inputProps} label={label} error={errorMessage}/>);
};
/**
 * A wrapper over Mantine's MultiSelect to support Rails query string. You would
 * typically use the `Select` component which nicely handles `f.select(multiple: true)`
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#number-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const MultiSelect = (props) => {
    const [values, setValues] = useState(props.value || props.defaultValue || []);
    const name = props.name;
    return (<>
      <MantineMultiSelect onChange={setValues} 
    // Mantine creates a single hidden input with delimited values. That doesn't work
    // for Rails as it uses querystring brackets to represent multiple values. To fix
    // this, we rename the hidden input prop's name to _IGNORE and set the value ourselves.
    hiddenInputProps={{ name: '_IGNORE' }} {...props}/>
      {values.map((val) => (<input type="hidden" key={val} name={name} value={val} autoComplete="off"/>))}
    </>);
};
/**
 * A select component that wraps Mantine's Select and MultiSelect.
 *
 * It will switch between the two depending if you use `multiple: true` with `f.select`.
 *
 * Designed to work with a payload form_props's [select helpers](https://github.com/thoughtbot/form_props?tab=readme-ov-file#select-helpers),
 * [collection_select helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#collection-select), and [grouped_collection_select helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#group-collection-select).
 *
 * Please modify to your liking.
 */
export const Select = ({ includeHidden, name, options, errorKey, type: _type, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    const addHidden = includeHidden && rest.multiple;
    const data = options.map((item) => {
        if ('options' in item) {
            return {
                group: item.label,
                items: item.options,
            };
        }
        else {
            return item;
        }
    });
    return (<>
      {addHidden && (<input type="hidden" name={name} value={''} autoComplete="off"/>)}
      {rest.multiple ? (<MultiSelect name={name} {...rest} data={data} error={errorMessage}/>) : (<MantineSelect name={name} {...rest} data={data} error={errorMessage}/>)}
    </>);
};
/**
 * A TextArea component that wraps Mantine's TextArea.
 *
 * Designed to work with a payload form_props's [month_field helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#number-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const TextArea = ({ type: _type, label, errorKey, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return <MantineTextArea label={label} error={errorMessage} {...rest}/>;
};
export const FileField = ({ type: _type, errorKey, label, ...rest }) => {
    const errorMessage = useErrorMessage(errorKey);
    return <MantineFileInput label={label} error={errorMessage} {...rest}/>;
};
/**
 * A SubmitButton component.
 *
 * Designed to work with a payload form_props's [submit helper](https://github.com/thoughtbot/form_props?tab=readme-ov-file#form-helpers).
 * Mimics the rails equivalent. Please modify to your liking.
 */
export const SubmitButton = ({ type: _type, text, ...rest }) => {
    return (<MantineButton {...rest} type="submit">
      {text}
    </MantineButton>);
};
